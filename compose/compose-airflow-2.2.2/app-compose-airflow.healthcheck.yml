version: "3.7"

#================================================================================================
# NETWORK SETUP
#================================================================================================
networks:
  devopscorner_net:
    name: devopscorner_net
    driver: bridge
    ipam:
      config:
        - subnet: 172.146.146.0/16

#================================================================================================
# VOLUME SETUP
#================================================================================================
volumes:
  vol_container: &volume_default
    driver: ${VOLUMES_DRIVER:-local}
    driver_opts: &driver_default
      o: bind
      type: none
  vol_portainer:
    <<: *volume_default
    driver_opts:
      <<: *driver_default
      device: ${DATA_PORTAINER:-/opt/data/docker/portainer2.9}
  vol_postgres14:
    <<: *volume_default
    driver_opts:
      <<: *driver_default
      device: ${DATA_POSTGRESQL:-/opt/data/docker/postgresql14/pgdata}
  vol_airflow_dags:
    <<: *volume_default
    driver_opts:
      <<: *driver_default
      device: ${DATA_AIRFLOW_DAGS:-/opt/data/docker/airflow/dags}
  vol_airflow_logs:
    <<: *volume_default
    driver_opts:
      <<: *driver_default
      device: ${DATA_AIRFLOW_LOGS:-/opt/data/docker/airflow/logs}
  vol_airflow_plugins:
    <<: *volume_default
    driver_opts:
      <<: *driver_default
      device: ${DATA_AIRFLOW_PLUGINS:-/opt/data/docker/airflow/plugins}

#================================================================================================
# AIRFLOW GLOBAL
#================================================================================================
x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.2.2}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgresql/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgresql/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "true"
    AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - vol_airflow_dags:/opt/airflow/dags
    - vol_airflow_logs:/opt/airflow/logs
    - vol_airflow_plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  ulimits:
    nproc: 131072
    nofile:
      soft: 8192
      hard: 131072
    memlock:
      soft: -1
      hard: -1
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  #================================================================================================
  # PORTAINER
  #================================================================================================
  portainer:
    image: dockerframework/portainer:${PORTAINER_VERSION:-2.9}
    container_name: ${CONTAINER_PORTAINER:-devopscorner_portainer}
    restart: unless-stopped
    ports:
      - "${PORT_PORTAINER:-5212}:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - vol_portainer:/data
    environment:
      - PORTAINER_TEMPLATE=generic
      - PORTAINER_VERSION=${PORTAINER_VERSION:-2.9}
    privileged: true
    networks:
      devopscorner_net:
        ipv4_address: ${CONTAINER_IP_PORTAINER:-172.146.146.5}

  #================================================================================================
  # REDIS
  #================================================================================================
  redis:
    image: redis:latest
    container_name: ${CONTAINER_REDIS:-devopscorner_redis}
    restart: always
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    privileged: true
    tty: true
    networks:
      devopscorner_net:
        ipv4_address: ${CONTAINER_IP_REDIS:-172.146.146.212}

  #================================================================================================
  # POSTGRESQL
  #================================================================================================
  postgresql:
    build:
      context: docker/airflow-ubuntu
      dockerfile: Dockerfile
    container_name: ${CONTAINER_POSTGRESQL:-devopscorner_postgresql}
    restart: always
    ports:
      - "${PORT_POSTGRESQL:-5432}:5432"
    volumes:
      #- /etc/localtime:/etc/localtime:ro           ## Do not use it in mac
      #- /var/run/docker.sock:/var/run/docker.sock  ## Do not use it in k8s
      - vol_postgres14:/var/lib/postgresql
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200
    environment:
      - TZ="Asia/Jakarta"
      - POSTGRES_VERSION=${POSTGRES_VERSION:-14.1}
      - POSTGRES_USER=${POSTGRES_USER:-airflow}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-airflow}
      - POSTGRES_DB=${POSTGRES_DB:-airflow}
      #- PGDATA=${PGDATA:-/var/lib/postgresql/pgdata}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    privileged: true
    tty: true
    networks:
      devopscorner_net:
        ipv4_address: ${CONTAINER_IP_POSTGRESQL:-172.146.146.6}

  #================================================================================================
  # AIRFLOW
  #================================================================================================
  airflow-webserver:
    <<: *airflow-common
    container_name: ${CONTAINER_AIRFLOW_WEB:-devopscorner_airflow_web}
    restart: always
    ports:
      - 8080:8080
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    privileged: true
    tty: true
    networks:
      devopscorner_net:
        ipv4_address: ${CONTAINER_IP_POSTGRESQL:-172.146.146.7}

  airflow-scheduler:
    <<: *airflow-common
    container_name: ${CONTAINER_AIRFLOW_SCHEDULER:-devopscorner_airflow_scheduler}
    restart: always
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    container_name: ${CONTAINER_AIRFLOW_WORKER:-devopscorner_airflow_worker}
    restart: always
    command: celery worker
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    container_name: ${CONTAINER_AIRFLOW_TRIGGER:-devopscorner_airflow_trigger}
    restart: always
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: ${CONTAINER_AIRFLOW_INIT:-devopscorner_airflow_init}
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - .:/sources

  airflow-cli:
    <<: *airflow-common
    container_name: ${CONTAINER_AIRFLOW_CLI:-devopscorner_airflow_cli}
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    container_name: ${CONTAINER_AIRFLOW_FLOWER:-devopscorner_airflow_flower}
    restart: always
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
